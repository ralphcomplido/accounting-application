<#@ template language="C#" inherits="LightNap.Scaffolding.Templates.BaseTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using <#= Parameters.CoreNamespace #>.Api;
using <#= Parameters.CoreNamespace #>.<#= Parameters.NameForNamespace #>.Interfaces;
using <#= Parameters.CoreNamespace #>.<#= Parameters.NameForNamespace #>.Dto.Request;
using <#= Parameters.CoreNamespace #>.<#= Parameters.NameForNamespace #>.Dto.Response;
using Microsoft.AspNetCore.Mvc;

namespace <#= Parameters.WebApiNamespace #>.Controllers
{
    // TODO: Update authorization for methods via the Authorize attribute at the controller or method level.
    // Also register this controller's dependencies in the AddApplicationServices method of Extensions/ApplicationServiceExtensions.cs:
    //
    // services.AddScoped<I<#= Parameters.PascalName #>Service, <#= Parameters.PascalName #>Service>();
    //
    [ApiController]
    [Route("api/[controller]")]
    public class <#= Parameters.PascalNamePlural #>Controller(I<#= Parameters.PascalName #>Service <#= Parameters.CamelNamePlural #>Service) : ControllerBase
    {
        [HttpGet("{<#= Parameters.IdProperty.CamelName #>}")]
        [ProducesResponseType(typeof(ApiResponseDto<<#= Parameters.PascalName #>Dto>), 200)]
        public async Task<ApiResponseDto<<#= Parameters.PascalName #>Dto>> Get<#= Parameters.PascalName #>(<#= Parameters.IdProperty.BackEndType #> <#= Parameters.IdProperty.CamelName #>)
        {
            return new ApiResponseDto<<#= Parameters.PascalName #>Dto>(await <#= Parameters.CamelNamePlural #>Service.Get<#= Parameters.PascalName #>Async(<#= Parameters.IdProperty.CamelName #>));
        }

        [HttpPost("search")]
        [ProducesResponseType(typeof(ApiResponseDto<PagedResponseDto<<#= Parameters.PascalName #>Dto>>), 200)]
        public async Task<ApiResponseDto<PagedResponseDto<<#= Parameters.PascalName #>Dto>>> Search<#= Parameters.PascalNamePlural #>([FromBody] Search<#= Parameters.PascalNamePlural #>Dto dto)
        {
            return new ApiResponseDto<PagedResponseDto<<#= Parameters.PascalName #>Dto>>(await <#= Parameters.CamelNamePlural #>Service.Search<#= Parameters.PascalNamePlural #>Async(dto));
        }

        [HttpPost]
        [ProducesResponseType(typeof(ApiResponseDto<<#= Parameters.PascalName #>Dto>), 201)]
        public async Task<ApiResponseDto<<#= Parameters.PascalName #>Dto>> Create<#= Parameters.PascalName #>([FromBody] Create<#= Parameters.PascalName #>Dto dto)
        {
            return new ApiResponseDto<<#= Parameters.PascalName #>Dto>(await <#= Parameters.CamelNamePlural #>Service.Create<#= Parameters.PascalName #>Async(dto));
        }

        [HttpPut("{<#= Parameters.IdProperty.CamelName #>}")]
        [ProducesResponseType(typeof(ApiResponseDto<<#= Parameters.PascalName #>Dto>), 200)]
        public async Task<ApiResponseDto<<#= Parameters.PascalName #>Dto>> Update<#= Parameters.PascalName #>(<#= Parameters.IdProperty.BackEndType #> <#= Parameters.IdProperty.CamelName #>, [FromBody] Update<#= Parameters.PascalName #>Dto dto)
        {
            return new ApiResponseDto<<#= Parameters.PascalName #>Dto>(await <#= Parameters.CamelNamePlural #>Service.Update<#= Parameters.PascalName #>Async(<#= Parameters.IdProperty.CamelName #>, dto));
        }

        [HttpDelete("{<#= Parameters.IdProperty.CamelName #>}")]
        [ProducesResponseType(typeof(ApiResponseDto<bool>), 200)]
        public async Task<ApiResponseDto<bool>> Delete<#= Parameters.PascalName #>(<#= Parameters.IdProperty.BackEndType #> <#= Parameters.IdProperty.CamelName #>)
        {
            await <#= Parameters.CamelNamePlural #>Service.Delete<#= Parameters.PascalName #>Async(<#= Parameters.IdProperty.CamelName #>);
            return new ApiResponseDto<bool>(true);
        }
    }
}
