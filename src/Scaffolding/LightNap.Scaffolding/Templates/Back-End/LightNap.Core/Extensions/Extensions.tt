<#@ template language="C#" inherits="LightNap.Scaffolding.Templates.BaseTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using <#= Parameters.EntityNamespace #>;
using <#= Parameters.CoreNamespace #>.<#= Parameters.NameForNamespace #>.Dto.Request;
using <#= Parameters.CoreNamespace #>.<#= Parameters.NameForNamespace #>.Dto.Response;

namespace <#= Parameters.CoreNamespace #>.Extensions
{
    public static class <#= Parameters.PascalName #>Extensions
    {
        public static <#= Parameters.PascalName #> ToCreate(this Create<#= Parameters.PascalName #>Dto dto)
        {
            // TODO: Update these fields to match the DTO.
            var item = new <#= Parameters.PascalName #>()
            {
<#  if (Parameters.IdProperty.IsRequired) { #>
		        <#= Parameters.IdProperty.Name #> = dto.<#= Parameters.IdProperty.Name #>,
<#  } #>
<# foreach (var property in Parameters.SetProperties) { #>
                <#= property.Name #> = dto.<#= property.Name #>,
<# } #>
            };  
            return item;
        }

        public static <#= Parameters.PascalName #>Dto ToDto(this <#= Parameters.PascalName #> item)
        {
            // TODO: Update these fields to match the DTO.
            var dto = new <#= Parameters.PascalName #>Dto()
            {
                <#= Parameters.IdProperty.Name #> = item.<#= Parameters.IdProperty.Name #>,
<# foreach (var property in Parameters.GetProperties) { #>
                <#= property.Name #> = item.<#= property.Name #>,
<# } #>
            };
            return dto;
        }

        public static void UpdateFromDto(this <#= Parameters.PascalName #> item, Update<#= Parameters.PascalName #>Dto dto)
        {
            // TODO: Update these fields to match the DTO.
<# foreach (var property in Parameters.SetProperties) { #>
            item.<#= property.Name #> = dto.<#= property.Name #>;
<# } #>
        }
    }
}