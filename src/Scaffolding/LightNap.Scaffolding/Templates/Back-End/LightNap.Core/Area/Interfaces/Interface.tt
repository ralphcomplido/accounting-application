<#@ template language="C#" inherits="LightNap.Scaffolding.Templates.BaseTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using <#= Parameters.CoreNamespace #>.Api;
using <#= Parameters.CoreNamespace #>.<#= Parameters.NameForNamespace #>.Dto.Request;
using <#= Parameters.CoreNamespace #>.<#= Parameters.NameForNamespace #>.Dto.Response;

namespace <#= Parameters.CoreNamespace #>.<#= Parameters.NameForNamespace #>.Interfaces
{
    public interface I<#= Parameters.PascalName #>Service
    {
        Task<<#= Parameters.PascalName #>Dto?> Get<#= Parameters.PascalName #>Async(<#= Parameters.IdProperty.BackEndType #> <#= Parameters.IdProperty.CamelName #>);
        Task<PagedResponseDto<<#= Parameters.PascalName #>Dto>> Search<#= Parameters.PascalNamePlural #>Async(Search<#= Parameters.PascalNamePlural #>Dto dto);
        Task<<#= Parameters.PascalName #>Dto> Create<#= Parameters.PascalName #>Async(Create<#= Parameters.PascalName #>Dto dto);
        Task<<#= Parameters.PascalName #>Dto> Update<#= Parameters.PascalName #>Async(<#= Parameters.IdProperty.BackEndType #> <#= Parameters.IdProperty.CamelName #>, Update<#= Parameters.PascalName #>Dto dto);
        Task Delete<#= Parameters.PascalName #>Async(<#= Parameters.IdProperty.BackEndType #> <#= Parameters.IdProperty.CamelName #>);
    }
}
